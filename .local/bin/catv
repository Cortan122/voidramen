#!/usr/bin/env jitcc

#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>
#include <stdint.h>

#define UTF8_ACCEPT 0
#define UTF8_REJECT 12

const uint8_t utf8d[] = {
  // The first part of the table maps bytes to character classes that
  // to reduce the size of the transition table and create bitmasks.
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
   7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
   8,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
  10,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3, 11,6,6,6,5,8,8,8,8,8,8,8,8,8,8,8,

  // The second part is a transition table that maps a combination
  // of a state of the automaton and a character class to a state.
   0,12,24,36,60,96,84,12,12,12,48,72, 12,12,12,12,12,12,12,12,12,12,12,12,
  12, 0,12,12,12,12,12, 0,12, 0,12,12, 12,24,12,12,12,12,12,24,12,24,12,12,
  12,12,12,12,12,12,12,24,12,12,12,12, 12,24,12,12,12,12,12,12,12,24,12,12,
  12,12,12,12,12,12,12,36,12,36,12,12, 12,36,12,12,12,12,12,36,12,36,12,12,
  12,36,12,12,12,12,12,12,12,12,12,12,
};

int decode(int* state, uint32_t* codep, uint8_t byte){
  int type = utf8d[byte];

  *codep = (*state != UTF8_ACCEPT) ?
    (byte & 0x3fu) | (*codep << 6) :
    (0xff >> type) & (byte);

  *state = utf8d[256 + *state + type];
  return *state;
}

int istty = 0;
int hasLine = 0;
int printNewlines = 1;
int useUTF8 = 0;
int escapeUTF8 = 0;

#define COLOR_UTF8 (istty?"\x1b[34m":"")
#define COLOR_SET (istty?"\x1b[33m":"")
#define COLOR_RESET (istty?"\x1b[0m":"")

void catChar(uint8_t ch){
  hasLine = !printNewlines;
  if(ch == '\\'){
    printf("%s\\\\%s", COLOR_SET, COLOR_RESET);
  }else if(ch == '\n'){
    if(printNewlines){
      printf("\n");
    }else{
      printf("%s\\n%s", COLOR_SET, COLOR_RESET);
    }
  }else if(ch == '\e'){
    printf("%s\\e%s", COLOR_SET, COLOR_RESET);
  }else if(ch == '\t'){
    printf("%s\\t%s", COLOR_SET, COLOR_RESET);
  }else if(ch == '\r'){
    printf("%s\\r%s", COLOR_SET, COLOR_RESET);
  }else if(' ' <= ch && ch <= '~'){
    printf("%c", ch);
  }else{
    printf("%s\\x%02x%s", COLOR_SET, ch, COLOR_RESET);
  }
}

void cat(FILE* fp, char *s){
  /* Reset EOF condition on stdin. */
	if(fp == stdin && feof(stdin))clearerr(stdin);

  uint32_t utf8codepoint;
  int utf8state = 0;
  uint8_t utf8buf[10];
  int utf8bufind = 0;
  int t;
  while((t = getc(fp)) != EOF){
    uint8_t ch = (uint8_t)t;
    if(ch&0x80 && useUTF8 || utf8bufind){
      utf8buf[utf8bufind++] = ch;
      decode(&utf8state, &utf8codepoint, ch);

      if(utf8state == UTF8_REJECT){
        for(int i = 0; i < utf8bufind; i++){
          catChar(utf8buf[i]);
        }
        utf8bufind = utf8state = utf8codepoint = 0;
      }else if(utf8state == UTF8_ACCEPT){
        utf8buf[utf8bufind++] = '\0';

        if(escapeUTF8){
          if(utf8codepoint<=0xffff){
            printf("%s\\u%04x%s", COLOR_UTF8, utf8codepoint, COLOR_RESET);
          }else{
            printf("%s\\U%08x%s", COLOR_UTF8, utf8codepoint, COLOR_RESET);
          }
        }else{
          printf("%s%s%s", COLOR_UTF8, utf8buf, COLOR_RESET);
        }

        utf8bufind = utf8state = utf8codepoint = 0;
      }
    }else{
      catChar(ch);
    }
  }
}

int main(int argc, char *argv[]){
  argv[0] = "catv";
  istty = isatty(1);

  signed char c;
  while((c = getopt(argc, argv, "fnuUh")) != -1){
    switch(c){
      case 'f':
        istty = 1;
        break;
      case 'n':
        printNewlines = 0;
        break;
      case 'U':
        escapeUTF8 = 1;
        /* FALLTHROUGH; */
      case 'u':
        useUTF8 = 1;
        break;
      case '?':
      case 'h':
        fprintf(stderr,
          "\n"
          "Usage: catv [OPTION]... [FILE]...\n"
          "\n"
          "Concatenate FILE(s) to standard output. (and use %s\\x00%s for nonprintable chars)\n"
          "With no FILE, or when FILE is -, read standard input.\n"
          "\n"
          "  -u    \t Print utf8 characters as %scharacters%s\n"
          "  -U    \t Print utf8 characters as %s\\U0001f914%s\n"
          "  -n    \t Print newlines as %s\\n%s\n"
          "  -f    \t Force color even when stdout is not a tty\n"
          "  -h    \t Show this message\n"
          "\n",
          COLOR_SET, COLOR_RESET,
          COLOR_UTF8, COLOR_RESET,
          COLOR_UTF8, COLOR_RESET,
          COLOR_SET, COLOR_RESET
        );
        return 0; //todo
      default:
        abort();
    }
  }
  argv += optind-1;
  argc -= optind-1;

  if(argc == 1){
    cat(stdin, "<stdin>");
  }else{
    for(int i = 1; i < argc; i++){
      int fd = STDIN_FILENO;
      char* name = "<stdin>";
      if(strcmp(argv[i], "-") != 0){
        fd = open(argv[i], O_RDONLY);
        name = argv[i];
      }

      if(fd < 0){
        if(hasLine)printf("\n");
        fprintf(stderr, "can't open %s\n", argv[i]);
        exit(3);
      }else{
        FILE* fp = fdopen(fd, "r");
        cat(fp, name);
        fclose(fp);
        close(fd);
      }
    }
  }

  if(hasLine)printf("\n");
  return 0;
}
